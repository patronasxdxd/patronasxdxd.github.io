{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["snarkjs","require","makeProof","_proofInput","_wasm","_zkey","groth16","fullProve","proof","publicSignals","verifyProof","_verificationkey","signals","fetch","then","res","json","vkey","verify","App","useState","a","setA","b","setB","setProof","setSignals","isValid","setIsValid","className","Text","href","Field","label","Input","type","required","value","onChange","e","target","placeholder","Button","Outline","onClick","console","log","length","proofInput","_proof","_signals","JSON","stringify","_isValid","width","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2eAKMA,EAAUC,EAAQ,KAgBlBC,EAAS,iDAAG,WAAOC,EAAkBC,EAAeC,GAAa,qGAC/BL,EAAQM,QAAQC,UAAUJ,EAAaC,EAAOC,GAAO,KAAD,EAA/D,OAA+D,SAAnFG,EAAK,EAALA,MAAOC,EAAa,EAAbA,cAAa,kBACrB,CAAED,QAAOC,kBAAe,2CAC/B,gBAHc,0CAKTC,EAAW,iDAAG,WAAOC,EAA0BC,EAAcJ,GAAU,mGACzDK,MAAMF,GAAkBG,MAAK,SAAUC,GACzD,OAAOA,EAAIC,MACZ,IAAG,KAAD,EAFQ,OAAJC,EAAI,gBAIQjB,EAAQM,QAAQY,OAAOD,EAAML,EAASJ,GAAO,KAAD,EAArD,OAAHO,EAAG,yBACFA,GAAG,2CACV,gBAPgB,0CAqEFI,MA5Df,WACC,MAAkBC,mBAAS,KAAI,mBAAxBC,EAAC,KAAEC,EAAI,KACd,EAAkBF,mBAAS,MAAK,mBAAzBG,EAAC,KAAEC,EAAI,KAEd,EAA0BJ,mBAAS,IAAG,mBAA/BZ,EAAK,KAAEiB,EAAQ,KACtB,EAA8BL,mBAAS,IAAG,mBAAnCR,EAAO,KAAEc,EAAU,KAC1B,EAA8BN,oBAAS,GAAM,mBAAtCO,EAAO,KAAEC,EAAU,KA+B1B,OACC,8BACC,yBAAQC,UAAU,aAAY,UAC7B,eAACC,EAAA,EAAI,WAAC,sCAC8B,mBAAGC,KAAK,mCAAkC,SAAC,sBAE/E,8BAAK,mBACL,cAACC,EAAA,EAAK,CAACC,MAAM,WAAU,SACtB,cAACC,EAAA,EAAK,CAACC,KAAK,OAAOC,UAAU,EAAMC,MAAOhB,EAAGiB,SAhBjC,SAACC,GAChBjB,EAAKiB,EAAEC,OAAOH,MACf,EAcoEI,YAAY,aAE7E,cAACT,EAAA,EAAK,CAACC,MAAM,WAAU,SACtB,cAACC,EAAA,EAAK,CAACC,KAAK,OAAOC,UAAU,EAAMC,MAAOd,EAAGe,SAfjC,SAACC,GAChBf,EAAKe,EAAEC,OAAOH,MACf,EAaoEI,YAAY,cAE7E,cAACC,EAAA,EAAOC,QAAO,CAACC,QAtCD,WAEjB,GADAC,QAAQC,IAAIvB,EAAEwB,QACE,GAAZ1B,EAAE0B,QAA2B,GAAZxB,EAAEwB,OAAvB,CAGA,IAAIC,EAAa,CAAE3B,IAAGE,KACtBsB,QAAQC,IAAIE,GAEZ9C,EAAU8C,EAZI,qCACA,4CAW4BlC,MAAK,YAAiD,IAAvCmC,EAAM,EAAbzC,MAA8B0C,EAAQ,EAAvBzC,cAChEgB,EAAS0B,KAAKC,UAAUH,EAAQ,KAAM,IACtCvB,EAAWyB,KAAKC,UAAUF,EAAU,KAAM,IAC1CxC,EAboB,8CAaSwC,EAAUD,GAAQnC,MAAK,SAACuC,GACpDzB,EAAWyB,EACZ,GACD,GAVA,CAWD,EAuBsC,SAAC,mBAA+B,UAC5D,cAACvB,EAAA,EAAI,CAACwB,MAAO,GAAM,SAAE9C,IAAa,YAChC,cAACsB,EAAA,EAAI,UAAElB,IAAe,UAE9BJ,EAAMuC,OAAS,GAAK,cAACjB,EAAA,EAAI,UAAEH,EAAU,cAAgB,sBAI1D,EC/Ee4B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB3C,MAAK,YAAkD,IAA/C4C,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,EACV,GAEJ,ECNAO,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,MAENC,SAASC,eAAe,SAM1BZ,G","file":"static/js/main.9f36ea85.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport { Field, Input, Text, Button, Link } from \"rimble-ui\";\n\nconst snarkjs = require(\"snarkjs\");\n\nconst getSolidityProofArray = (proof: any) => {\n\tlet proofList = [\n\t\tproof[\"pi_a\"][0],\n\t\tproof[\"pi_a\"][1],\n\t\tproof[\"pi_b\"][0][1],\n\t\tproof[\"pi_b\"][0][0],\n\t\tproof[\"pi_b\"][1][1],\n\t\tproof[\"pi_b\"][1][0],\n\t\tproof[\"pi_c\"][0],\n\t\tproof[\"pi_c\"][1],\n\t];\n\treturn proofList;\n};\n\nconst makeProof = async (_proofInput: any, _wasm: string, _zkey: string) => {\n\tconst { proof, publicSignals } = await snarkjs.groth16.fullProve(_proofInput, _wasm, _zkey);\n\treturn { proof, publicSignals };\n};\n\nconst verifyProof = async (_verificationkey: string, signals: any, proof: any) => {\n\tconst vkey = await fetch(_verificationkey).then(function (res) {\n\t\treturn res.json();\n\t});\n\n\tconst res = await snarkjs.groth16.verify(vkey, signals, proof);\n\treturn res;\n};\n\nfunction App() {\n\tconst [a, setA] = useState(\"3\");\n\tconst [b, setB] = useState(\"11\");\n\n\tconst [proof, setProof] = useState(\"\");\n\tconst [signals, setSignals] = useState(\"\");\n\tconst [isValid, setIsValid] = useState(false);\n\n\tlet wasmFile = \"http://localhost:8000/circuit.wasm\";\n\tlet zkeyFile = \"http://localhost:8000/circuit_final.zkey\";\n\tlet verificationKey = \"http://localhost:8000/verification_key.json\";\n\n\tconst runProofs = () => {\n\t\tconsole.log(b.length);\n\t\tif (a.length == 0 || b.length == 0) {\n\t\t\treturn;\n\t\t}\n\t\tlet proofInput = { a, b };\n\t\tconsole.log(proofInput);\n\n\t\tmakeProof(proofInput, wasmFile, zkeyFile).then(({ proof: _proof, publicSignals: _signals }) => {\n\t\t\tsetProof(JSON.stringify(_proof, null, 2));\n\t\t\tsetSignals(JSON.stringify(_signals, null, 2));\n\t\t\tverifyProof(verificationKey, _signals, _proof).then((_isValid) => {\n\t\t\t\tsetIsValid(_isValid);\n\t\t\t});\n\t\t});\n\t};\n\n\tconst changeA = (e) => {\n\t\tsetA(e.target.value);\n\t};\n\n\tconst changeB = (e) => {\n\t\tsetB(e.target.value);\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<Text>\n\t\t\t\t\tThe underlying circuit is from the <a href=\"https://github.com/iden3/snarkjs\">snarkjs readme</a>\n\t\t\t\t</Text>\n\t\t\t\t<pre>Witness Inputs</pre>\n\t\t\t\t<Field label=\"Input a:\">\n\t\t\t\t\t<Input type=\"text\" required={true} value={a} onChange={changeA} placeholder=\"e.g. 3\" />\n\t\t\t\t</Field>\n\t\t\t\t<Field label=\"Input b:\">\n\t\t\t\t\t<Input type=\"text\" required={true} value={b} onChange={changeB} placeholder=\"e.g. 11\" />\n\t\t\t\t</Field>\n\t\t\t\t<Button.Outline onClick={runProofs}>Generate Proof</Button.Outline>\n\t\t\t\tProof: <Text width={1 / 2}>{proof}</Text>\n\t\t\t\tSignals: <Text>{signals}</Text>\n\t\t\t\tResult:\n\t\t\t\t{proof.length > 0 && <Text>{isValid ? \"Valid proof\" : \"Invalid proof\"}</Text>}\n\t\t\t</header>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}