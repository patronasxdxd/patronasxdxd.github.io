/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PoolInterface extends utils.Interface {
  functions: {
    "addDeposit()": FunctionFragment;
    "admin()": FunctionFragment;
    "balances(address)": FunctionFragment;
    "borrowedAmount()": FunctionFragment;
    "checkBalance(address)": FunctionFragment;
    "depositedAmount()": FunctionFragment;
    "patToken()": FunctionFragment;
    "poolAmount()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "borrowedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "patToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolAmount",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "patToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolAmount", data: BytesLike): Result;

  events: {};
}

export interface Pool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addDeposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkBalance(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    patToken(overrides?: CallOverrides): Promise<[string]>;

    poolAmount(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addDeposit(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  borrowedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  checkBalance(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

  depositedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  patToken(overrides?: CallOverrides): Promise<string>;

  poolAmount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addDeposit(overrides?: CallOverrides): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    checkBalance(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    patToken(overrides?: CallOverrides): Promise<string>;

    poolAmount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addDeposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    checkBalance(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    patToken(overrides?: CallOverrides): Promise<BigNumber>;

    poolAmount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addDeposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkBalance(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    patToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
