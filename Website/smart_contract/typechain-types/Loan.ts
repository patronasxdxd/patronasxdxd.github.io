/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type TermsStruct = {
  loanDaiAmount: BigNumberish;
  feeDaiAmount: BigNumberish;
  ethCollateralAmount: BigNumberish;
  repayByTimestamp: BigNumberish;
};

export type TermsStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber] & {
  loanDaiAmount: BigNumber;
  feeDaiAmount: BigNumber;
  ethCollateralAmount: BigNumber;
  repayByTimestamp: BigNumber;
};

export interface LoanInterface extends utils.Interface {
  functions: {
    "count()": FunctionFragment;
    "create((uint256,uint256,uint256,uint256),address)": FunctionFragment;
    "fundLoan(uint256)": FunctionFragment;
    "getCount()": FunctionFragment;
    "getState(uint256)": FunctionFragment;
    "liquidate(uint256)": FunctionFragment;
    "repay(uint256)": FunctionFragment;
    "takeALoanAndAcceptLoanTerms(uint256)": FunctionFragment;
    "tokenaddress()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [TermsStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "fundLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "repay", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "takeALoanAndAcceptLoanTerms",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenaddress",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fundLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "takeALoanAndAcceptLoanTerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenaddress",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Loan extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LoanInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    count(overrides?: CallOverrides): Promise<[BigNumber]>;

    create(
      _terms: TermsStruct,
      _daiAdress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fundLoan(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getState(count: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    liquidate(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repay(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    takeALoanAndAcceptLoanTerms(
      count: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenaddress(overrides?: CallOverrides): Promise<[string]>;
  };

  count(overrides?: CallOverrides): Promise<BigNumber>;

  create(
    _terms: TermsStruct,
    _daiAdress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fundLoan(
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCount(overrides?: CallOverrides): Promise<BigNumber>;

  getState(count: BigNumberish, overrides?: CallOverrides): Promise<string>;

  liquidate(
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repay(
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  takeALoanAndAcceptLoanTerms(
    count: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenaddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    count(overrides?: CallOverrides): Promise<BigNumber>;

    create(
      _terms: TermsStruct,
      _daiAdress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundLoan(count: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getCount(overrides?: CallOverrides): Promise<BigNumber>;

    getState(count: BigNumberish, overrides?: CallOverrides): Promise<string>;

    liquidate(count: BigNumberish, overrides?: CallOverrides): Promise<void>;

    repay(count: BigNumberish, overrides?: CallOverrides): Promise<void>;

    takeALoanAndAcceptLoanTerms(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenaddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    count(overrides?: CallOverrides): Promise<BigNumber>;

    create(
      _terms: TermsStruct,
      _daiAdress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fundLoan(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCount(overrides?: CallOverrides): Promise<BigNumber>;

    getState(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repay(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    takeALoanAndAcceptLoanTerms(
      count: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenaddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    create(
      _terms: TermsStruct,
      _daiAdress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fundLoan(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getState(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    takeALoanAndAcceptLoanTerms(
      count: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenaddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
