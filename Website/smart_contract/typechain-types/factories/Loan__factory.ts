/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Loan, LoanInterface } from "../Loan";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "count",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "loanDaiAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeDaiAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ethCollateralAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "repayByTimestamp",
            type: "uint256",
          },
        ],
        internalType: "struct loan.Terms",
        name: "_terms",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "_daiAdress",
        type: "address",
      },
    ],
    name: "create",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    name: "fundLoan",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    name: "getState",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    name: "liquidate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    name: "repay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    name: "takeALoanAndAcceptLoanTerms",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenaddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600060015534801561001557600080fd5b50604051610aed380380610aed83398101604081905261003491610063565b600280546001600160a01b039092166001600160a01b0319928316811790915560038054909216179055610093565b60006020828403121561007557600080fd5b81516001600160a01b038116811461008c57600080fd5b9392505050565b610a4b806100a26000396000f3fe6080604052600436106100865760003560e01c806344c9af281161005957806344c9af281461012e57806345382bb71461015b578063846b909a1461016e578063a87d942c1461018e578063f09b1eb4146101a357600080fd5b806306661abd1461008b578063371fd8e6146100b45780633feff76d146100d6578063415f12401461010e575b600080fd5b34801561009757600080fd5b506100a160015481565b6040519081526020015b60405180910390f35b3480156100c057600080fd5b506100d46100cf366004610911565b6101c3565b005b3480156100e257600080fd5b506003546100f6906001600160a01b031681565b6040516001600160a01b0390911681526020016100ab565b34801561011a57600080fd5b506100d4610129366004610911565b610359565b34801561013a57600080fd5b5061014e610149366004610911565b610443565b6040516100ab919061092a565b6100d4610169366004610911565b61052e565b34801561017a57600080fd5b506100d4610189366004610911565b6106ad565b34801561019a57600080fd5b506001546100a1565b3480156101af57600080fd5b506100a16101be36600461087d565b61075d565b60028181600082815260208190526040902060050154600160a01b900460ff1660028111156101f4576101f46109ff565b1461021a5760405162461bcd60e51b81526004016102119061097f565b60405180910390fd5b6000838152602081905260409020600501546001600160a01b031633146102705760405162461bcd60e51b815260206004820152600a60248201526937b7363c9037bbb732b960b11b6044820152606401610211565b600254600084815260208190526040902060058101546004820154600183015492546001600160a01b03948516946323b872dd94938116939216916102b4916109b6565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b15801561030357600080fd5b505af1158015610317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033b9190610854565b506000838152602081905260409020600501546001600160a01b0316ff5b60028181600082815260208190526040902060050154600160a01b900460ff16600281111561038a5761038a6109ff565b146103a75760405162461bcd60e51b81526004016102119061097f565b6000838152602081905260409020600401546001600160a01b031633146103cd57600080fd5b6000838152602081905260409020600301544210156104265760405162461bcd60e51b8152602060048201526015602482015274031b0b73a103132b337b932903a3432903230ba329605d1b6044820152606401610211565b6000838152602081905260409020600401546001600160a01b0316ff5b606060008083815260208190526040902060050154600160a01b900460ff166002811115610473576104736109ff565b14156104a357505060408051808201909152600e81526d1cdd185d194e8810dc99585d195960921b602082015290565b6001600083815260208190526040902060050154600160a01b900460ff1660028111156104d2576104d26109ff565b141561050157505060408051808201909152600d81526c1cdd185d194e88119d5b991959609a1b602082015290565b505060408051808201909152600c81526b39ba30ba329d103a30b5b2b760a11b602082015290565b919050565b60018181600082815260208190526040902060050154600160a01b900460ff16600281111561055f5761055f6109ff565b1461057c5760405162461bcd60e51b81526004016102119061097f565b60008381526020819052604090206002015434146105cd5760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b6044820152606401610211565b600083815260208190526040908190206005810180546001600160a81b0319163360ff60a01b191617600160a11b1790556002547fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fba549154925163a9059cbb60e01b81526001600160a01b0392831660048201526024810193909352169063a9059cbb906044015b602060405180830381600087803b15801561066f57600080fd5b505af1158015610683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a79190610854565b50505050565b60008181600082815260208190526040902060050154600160a01b900460ff1660028111156106de576106de6109ff565b146106fb5760405162461bcd60e51b81526004016102119061097f565b6000838152602081905260409081902060058101805460ff60a01b1916600160a01b179055600254905491516323b872dd60e01b815233600482015230602482015260448101929092526001600160a01b0316906323b872dd90606401610655565b60408051608081018252838152336020808301828152838501928352600060608086018281526001805484528386528884208851805182559687015191810191909155978501516002808a01919091559490910151600388015591516004870180546001600160a01b039283166001600160a01b031991821617909155945160058801805491909216958116861782559251919694919390926001600160a81b03191690911790600160a01b90849081111561081b5761081b6109ff565b0217905550506001805491506000610832836109ce565b909155509392505050565b80356001600160a01b038116811461052957600080fd5b60006020828403121561086657600080fd5b8151801515811461087657600080fd5b9392505050565b60008082840360a081121561089157600080fd5b608081121561089f57600080fd5b506040516080810181811067ffffffffffffffff821117156108d157634e487b7160e01b600052604160045260246000fd5b806040525083358152602084013560208201526040840135604082015260608401356060820152809250506109086080840161083d565b90509250929050565b60006020828403121561092357600080fd5b5035919050565b600060208083528351808285015260005b818110156109575785810183015185820160400152820161093b565b81811115610969576000604083870101525b50601f01601f1916929092016040019392505050565b60208082526019908201527f6e6f7420616c6c6f77656420696e207468697320737461746500000000000000604082015260600190565b600082198211156109c9576109c96109e9565b500190565b60006000198214156109e2576109e26109e9565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fdfea264697066735822122019b64554ae18c016072456db25748b66e73cab517887309c02bfccef1edf13b264736f6c63430008070033";

type LoanConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LoanConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Loan__factory extends ContractFactory {
  constructor(...args: LoanConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Loan> {
    return super.deploy(_token, overrides || {}) as Promise<Loan>;
  }
  getDeployTransaction(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token, overrides || {});
  }
  attach(address: string): Loan {
    return super.attach(address) as Loan;
  }
  connect(signer: Signer): Loan__factory {
    return super.connect(signer) as Loan__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LoanInterface {
    return new utils.Interface(_abi) as LoanInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Loan {
    return new Contract(address, _abi, signerOrProvider) as Loan;
  }
}
