/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Collateral, CollateralInterface } from "../Collateral";

const _abi = [
  {
    inputs: [],
    name: "borrower",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "collateralAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "duration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_loanAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_collateralAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_payOffAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_duration",
        type: "uint256",
      },
    ],
    name: "initLoan",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "loanAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "payOffAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600080546001600160a01b0319163317905534801561002257600080fd5b506101bf806100326000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806392d09ceb1161005b57806392d09ceb146100d25780639d585f7f146100db578063d31884e6146100e4578063fc0c546a1461012657600080fd5b80630fb5a6b414610082578063563010631461009e5780637df1f1b9146100a7575b600080fd5b61008b60055481565b6040519081526020015b60405180910390f35b61008b60045481565b6000546100ba906001600160a01b031681565b6040516001600160a01b039091168152602001610095565b61008b60035481565b61008b60025481565b6101246100f2366004610139565b600180546001600160a01b0319166001600160a01b039690961695909517909455600292909255600355600455600555565b005b6001546100ba906001600160a01b031681565b600080600080600060a0868803121561015157600080fd5b85356001600160a01b038116811461016857600080fd5b9760208701359750604087013596606081013596506080013594509250505056fea264697066735822122041441664315ebd7efea0f5ed9f23c970f48e57686302f4c1d0f89dbb58720b8764736f6c63430008070033";

type CollateralConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CollateralConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Collateral__factory extends ContractFactory {
  constructor(...args: CollateralConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Collateral> {
    return super.deploy(overrides || {}) as Promise<Collateral>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Collateral {
    return super.attach(address) as Collateral;
  }
  connect(signer: Signer): Collateral__factory {
    return super.connect(signer) as Collateral__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CollateralInterface {
    return new utils.Interface(_abi) as CollateralInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Collateral {
    return new Contract(address, _abi, signerOrProvider) as Collateral;
  }
}
