/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type BoxStructStruct = {
  proposalId: BigNumberish;
  amount: BigNumberish;
  value: string;
  timestamp: BigNumberish;
};

export type BoxStructStructOutput = [
  BigNumber,
  BigNumber,
  string,
  BigNumber
] & {
  proposalId: BigNumber;
  amount: BigNumber;
  value: string;
  timestamp: BigNumber;
};

export interface BoxFacetInterface extends utils.Interface {
  functions: {
    "addProposal(uint256)": FunctionFragment;
    "addProposalStruct(uint256,uint256,string)": FunctionFragment;
    "changeOwner(address)": FunctionFragment;
    "getAllTransactions()": FunctionFragment;
    "getProposal()": FunctionFragment;
    "getTransactionCount()": FunctionFragment;
    "retrieve()": FunctionFragment;
    "retrieveOwner()": FunctionFragment;
    "store(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addProposalStruct",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "changeOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAllTransactions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "retrieve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "retrieveOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "store", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "addProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addProposalStruct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "retrieve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "retrieveOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "store", data: BytesLike): Result;

  events: {
    "ValueChanged(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ValueChanged"): EventFragment;
}

export type ValueChangedEvent = TypedEvent<
  [BigNumber],
  { newValue: BigNumber }
>;

export type ValueChangedEventFilter = TypedEventFilter<ValueChangedEvent>;

export interface BoxFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BoxFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addProposalStruct(
      proposalId: BigNumberish,
      amount: BigNumberish,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllTransactions(
      overrides?: CallOverrides
    ): Promise<[BoxStructStructOutput[]]>;

    getProposal(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTransactionCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    retrieve(overrides?: CallOverrides): Promise<[BigNumber]>;

    retrieveOwner(overrides?: CallOverrides): Promise<[string]>;

    store(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addProposal(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addProposalStruct(
    proposalId: BigNumberish,
    amount: BigNumberish,
    value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllTransactions(
    overrides?: CallOverrides
  ): Promise<BoxStructStructOutput[]>;

  getProposal(overrides?: CallOverrides): Promise<BigNumber>;

  getTransactionCount(overrides?: CallOverrides): Promise<BigNumber>;

  retrieve(overrides?: CallOverrides): Promise<BigNumber>;

  retrieveOwner(overrides?: CallOverrides): Promise<string>;

  store(
    newValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addProposalStruct(
      proposalId: BigNumberish,
      amount: BigNumberish,
      value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    getAllTransactions(
      overrides?: CallOverrides
    ): Promise<BoxStructStructOutput[]>;

    getProposal(overrides?: CallOverrides): Promise<BigNumber>;

    getTransactionCount(overrides?: CallOverrides): Promise<BigNumber>;

    retrieve(overrides?: CallOverrides): Promise<BigNumber>;

    retrieveOwner(overrides?: CallOverrides): Promise<string>;

    store(newValue: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ValueChanged(uint256)"(newValue?: null): ValueChangedEventFilter;
    ValueChanged(newValue?: null): ValueChangedEventFilter;
  };

  estimateGas: {
    addProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addProposalStruct(
      proposalId: BigNumberish,
      amount: BigNumberish,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllTransactions(overrides?: CallOverrides): Promise<BigNumber>;

    getProposal(overrides?: CallOverrides): Promise<BigNumber>;

    getTransactionCount(overrides?: CallOverrides): Promise<BigNumber>;

    retrieve(overrides?: CallOverrides): Promise<BigNumber>;

    retrieveOwner(overrides?: CallOverrides): Promise<BigNumber>;

    store(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addProposalStruct(
      proposalId: BigNumberish,
      amount: BigNumberish,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllTransactions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTransactionCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    retrieve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    retrieveOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    store(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
